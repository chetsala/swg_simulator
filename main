----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 07/25/2024 08:18:47 PM
-- Design Name: 
-- Module Name: SWG - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity SWG is
    Port ( Clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           rot_A : in STD_LOGIC;
           rot_B : in STD_LOGIC;
           LD5 : out STD_LOGIC_VECTOR (2 downto 0);
           LD6 : out STD_LOGIC_VECTOR (2 downto 0);
           SSD : out STD_LOGIC_VECTOR (6 downto 0);
           C   : out STD_LOGIC
           );
       
end SWG;

architecture Behavioral of SWG is
    -- Enumerated type declaration and state signal declaration
    type t_State is (INIT_POOL_SIZE, SET_TEMPERATURE, SET_SALINITY,
                         IDLE, PUMP_ON, PUMP_OFF, ADD_SALT, SET_VALUE, CHECK_STATUS);
    signal State : t_State;
    

begin

    process(Clk) is
    begin
        if rising_edge(Clk) then
            if reset = '0' then
            -- Reset value
            State <= IDLE;
            
            else
                
                case State is
                    when INIT_POOL_SIZE =>
                        State <= SET_TEMPERATURE;
                    
                    when SET_TEMPERATURE =>
                        State <= SET_SALINITY;
                    
                    when SET_SALINITY =>
                        State <= IDLE;
                    
                    when IDLE =>
                        State <= PUMP_ON;
                        
                    when PUMP_ON =>
                        State <= PUMP_OFF; 
                    
                    when PUMP_OFF =>
                        State <= ADD_SALT;
                    
                    when ADD_SALT =>
                        State <= SET_VALUE;
                    
                    when SET_VALUE =>
                        State <= CHECK_STATUS;
                    
                    when CHECK_STATUS =>
                        State <= INIT_POOL_SIZE;
                    
                end case;
                    
        
        
            end if;
        end if;
    end process;
end Behavioral;
