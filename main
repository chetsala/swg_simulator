library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity ChlorineGenerator is
    Port (
        CLK      : in  STD_LOGIC;
        RST      : in  STD_LOGIC;
        SW       : in  STD_LOGIC_VECTOR (3 downto 0);
        BTN      : in  STD_LOGIC_VECTOR (4 downto 0);
        LD5      : out STD_LOGIC_VECTOR (2 downto 0);
        LD6      : out STD_LOGIC_VECTOR (2 downto 0);
        SSD      : out STD_LOGIC_VECTOR (6 downto 0)
    );
end ChlorineGenerator;

architecture Behavioral of ChlorineGenerator is
    type state_type is (INIT_POOL_SIZE, SET_TEMPERATURE, SET_SALINITY, IDLE, PUMP_ON, PUMP_OFF, ADD_SALT, SET_VALUE, CHECK_STATUS);
    signal state, next_state : state_type;

    signal pool_size, temperature, salinity : integer range 0 to 15 := 0;
    signal pump_status, system_status : STD_LOGIC := '0';

    -- SSD display logic and RGB LED control here
    -- ...

begin
    process(CLK, RST)
    begin
        if RST = '1' then
            state <= INIT_POOL_SIZE;
        elsif rising_edge(CLK) then
            state <= next_state;
        end if;
    end process;

    process(state, BTN, SW)
    begin
        next_state <= state;
        case state is
            when INIT_POOL_SIZE =>
                -- Display "Po", "ol", " S" etc. on SSD here
                if BTN(4) = '1' then  -- Set pool size button
                    pool_size <= conv_integer(SW);
                    next_state <= SET_TEMPERATURE;
                end if;

            when SET_TEMPERATURE =>
                if BTN(4) = '1' then  -- Set temperature button
                    temperature <= conv_integer(SW);
                    next_state <= SET_SALINITY;
                end if;

            when SET_SALINITY =>
                if BTN(4) = '1' then  -- Set salinity button
                    salinity <= conv_integer(SW);
                    next_state <= IDLE;
                end if;

            when IDLE =>
                if BTN(2) = '1' then  -- Pump on/off button
                    if pump_status = '0' then
                        pump_status <= '1';
                        next_state <= PUMP_ON;
                    else
                        pump_status <= '0';
                        next_state <= PUMP_OFF;
                    end if;
                elsif BTN(3) = '1' then  -- Add salt button
                    salinity <= salinity + 1;  -- Assuming each press adds 1 (or 100 lbs)
                    next_state <= ADD_SALT;
                elsif BTN(4) = '1' then  -- Set value button
                    next_state <= SET_VALUE;
                end if;

            when PUMP_ON =>
                if BTN(2) = '1' then  -- Pump off button
                    next_state <= PUMP_OFF;
                end if;

            when PUMP_OFF =>
                if BTN(2) = '1' then  -- Pump on button
                    next_state <= PUMP_ON;
                end if;

            when ADD_SALT =>
                next_state <= IDLE;

            when SET_VALUE =>
                if BTN(4) = '1' then  -- Set temperature or salinity
                    if temperature = 8 then  -- Example condition to switch between temp and salinity
                        salinity <= conv_integer(SW);
                    else
                        temperature <= conv_integer(SW);
                    end if;
                    next_state <= IDLE;
                end if;

            when CHECK_STATUS =>
                if (temperature > 6) and (salinity >= 5 and salinity <= 12) then
                    system_status <= '1';
                else
                    system_status <= '0';
                end if;
                next_state <= IDLE;

            when others =>
                next_state <= INIT_POOL_SIZE;
        end case;
    end process;

    -- Display logic for SSD and RGB LEDs based on the current state
    -- ...

end Behavioral;
