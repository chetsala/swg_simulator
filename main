library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;
use IEEE.math_real.all;

entity SWG is
    Port ( Clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           rot_A : in STD_LOGIC;
           rot_B : in STD_LOGIC;
           setSaltValue : in STD_LOGIC;
           setTempValue : in STD_LOGIC;
           pumpRunning : in STD_LOGIC;
           rotSwitch : in STD_LOGIC;
           addSalt : in STD_LOGIC; -- button to add salt to system if salt lvl is low
           LD5 : out STD_LOGIC_VECTOR (2 downto 0); -- rgbLED: pump output
           LD6 : out STD_LOGIC_VECTOR (2 downto 0); -- rgbLED: system status
           SSD : out STD_LOGIC_VECTOR (6 downto 0); -- seven seg
           C   : out STD_LOGIC;
           setPump : in STD_LOGIC;
           setValue : in STD_LOGIC -- New input for the switch
           );
end SWG;

architecture Behavioral of SWG is
    type t_State is (INIT_POOL_SIZE, SET_TEMPERATURE, SET_SALINITY,
                     IDLE, PUMP_ON, PUMP_OFF, ADD_SALT, SET_VALUE, CHECK_STATUS);
    signal State : t_State;

    constant DEBOUNCE_MAX : integer := 100000;  -- Adjust debounce time as needed
    signal rot_A_debounce_counter, rot_B_debounce_counter : integer := 0;
    signal rot_A_stable, rot_B_stable : std_logic := '0';
    signal debounce_flag : std_logic := '0';

    signal last_A, last_B : std_logic := '0';

    signal tens_digit, ones_digit : integer range 0 to 9;
    signal value : integer range 0 to 99 := 0;  -- Value to be displayed (0-99)
    signal count : unsigned(15 downto 0) := (others => '0'); -- alternating between digits
    signal c_temp : std_logic; -- temp var since "out" ports cannot be read in
    signal value_temp : integer range 0 to 99 := 0;  -- Value to be displayed (0-99)

    signal salt : integer range 0 to 99 := 35;
    signal temperature : integer range 0 to 99 := 78;
    signal pool_size : integer := 150;
    signal turnover : integer := 1665000000;
    signal duty_cycle : integer := 299700000;
    signal salt_temp : integer range 0 to 99 := 35;
    signal temperature_temp : integer range 0 to 99 := 78;

    signal temp_storage, salt_storage : integer range 0 to 99 := 0; -- New variables for storing values

begin

    -- Debouncing process for "rot_A"
    process(Clk, reset)
    begin
        if reset = '1' then
            rot_A_debounce_counter <= 0;
            rot_A_stable <= '0';
        elsif rising_edge(Clk) then
            if rot_A = '1' then
                if rot_A_debounce_counter < DEBOUNCE_MAX then
                    rot_A_debounce_counter <= rot_A_debounce_counter + 1;
                else
                    rot_A_stable <= '1';
                end if;
            else
                rot_A_debounce_counter <= 0;
                rot_A_stable <= '0';
            end if;
        end if;
    end process;

    -- Debouncing process for "rot_B"
    process(Clk, reset)
    begin
        if reset = '1' then
            rot_B_debounce_counter <= 0;
            rot_B_stable <= '0';
        elsif rising_edge(Clk) then
            if rot_B = '1' then
                if rot_B_debounce_counter < DEBOUNCE_MAX then
                    rot_B_debounce_counter <= rot_B_debounce_counter + 1;
                else
                    rot_B_stable <= '1';
                end if;
            else
                rot_B_debounce_counter <= 0;
                rot_B_stable <= '0';
            end if;
        end if;
    end process;

    -- Process to handle add/subtract logic and update 7-segment display
    process(Clk, reset)
        variable temp_value : integer range 0 to 99 := 0;
    begin
        if reset = '1' then
            count <= (others => '0');
            c_temp <= '0';
            tens_digit <= 0;
            ones_digit <= 0;
            value <= 0;
            debounce_flag <= '0';
            last_A <= '0';
            last_B <= '0';
            temp_value := 0;
        elsif rising_edge(Clk) then
            -- Determine rotation direction
            if rot_A /= last_A then
                if rot_B = rot_A then
                    if value < 99 then
                        value <= value + 1;
                    end if;
                else
                    if value > 0 then
                        value <= value - 1;
                    end if;
                end if;
            end if;
            last_A <= rot_A;
            last_B <= rot_B;

            -- Save values
            if setTempValue = '1' then
                temperature_temp <= value;
            elsif setSaltValue = '1' then
                salt_temp <= value;
            end if;

            -- Store values when setValue is switched
            if setValue = '1' then
                if setTempValue = '1' then
                    temp_storage <= value;
                elsif setSaltValue = '1' then
                    salt_storage <= value;
                end if;
            end if;

            -- Determine what to display
            if setTempValue = '1' then
                temp_value := temp_storage;
            elsif setSaltValue = '1' then
                temp_value := salt_storage;
            else
                temp_value := value;
            end if;

            value_temp <= temp_value;

            -- Convert to BCD
            tens_digit <= temp_value / 10;
            ones_digit <= temp_value mod 10;

            -- Alternate digit selection
            count <= count + 1;
            c_temp <= count(count'high);
        end if;
    end process;

    -- Main process
    process(Clk)
    begin
        if rising_edge(Clk) then
            if reset = '1' then
                State <= IDLE;
            else
                case State is
                    when IDLE =>
                        LD6 <= "010";
                        if setTempValue = '1' then 
                            State <= SET_TEMPERATURE;
                        elsif setSaltValue = '1' then 
                            State <= SET_SALINITY;
                        elsif setPump = '1' then 
                            State <= PUMP_ON;
                        elsif setPump = '0' then 
                            State <= PUMP_OFF;
                        else 
                            State <= IDLE;
                        end if;

                    when SET_TEMPERATURE =>
                        LD6 <= "100";
                        if setTempValue = '0' then 
                            State <= IDLE;
                        end if;

                    when SET_SALINITY =>
                        LD6 <= "001";
                        if setSaltValue = '0' then 
                            State <= IDLE;
                        end if;

                    when PUMP_ON =>
                        LD5 <= "010";
                        State <= IDLE;

                    when PUMP_OFF =>
                        LD5 <= "100";
                        State <= IDLE;

                    when others =>
                        State <= IDLE;
                end case;
            end if;
        end if;
    end process;

    -- 7-segment display logic
    process(c_temp, tens_digit, ones_digit)
    begin
        case c_temp is
            when '0' =>
                case ones_digit is
                    when 0 => SSD <= "0111111";
                    when 1 => SSD <= "0000110";
                    when 2 => SSD <= "1011011";
                    when 3 => SSD <= "1001111";
                    when 4 => SSD <= "1100110";
                    when 5 => SSD <= "1101101";
                    when 6 => SSD <= "1111101";
                    when 7 => SSD <= "0000111";
                    when 8 => SSD <= "1111111";
                    when 9 => SSD <= "1101111";
                    when others => SSD <= "0000000";  -- Default case
                end case;
            when others =>
                case tens_digit is
                    when 0 => SSD <= "0111111";
                    when 1 => SSD <= "0000110";
                    when 2 => SSD <= "1011011";
                    when 3 => SSD <= "1001111";
                    when 4 => SSD <= "1100110";
                    when 5 => SSD <= "1101101";
                    when 6 => SSD <= "1111101";
                    when 7 => SSD <= "0000111";
                    when 8 => SSD <= "1111111";
                    when 9 => SSD <= "1101111";
                    when others => SSD <= "0000000";  -- Default case
                end case;
        end case;
    end process;

    C <= c_temp;

end Behavioral;
